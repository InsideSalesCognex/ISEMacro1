'Handle 64-bit and 32-bit Office
#If VBA7 Then
  Declare PtrSafe Function GlobalUnlock Lib "kernel32" (ByVal hMem As LongPtr) As Long
  Declare PtrSafe Function GlobalLock Lib "kernel32" (ByVal hMem As LongPtr) As Long
  Declare PtrSafe Function GlobalAlloc Lib "kernel32" (ByVal wFlags As LongPtr, _
    ByVal dwBytes As LongPtr) As Long
  Declare PtrSafe Function CloseClipboard Lib "User32" () As Long
  Declare PtrSafe Function OpenClipboard Lib "User32" (ByVal hwnd As LongPtr) As Long
  Declare PtrSafe Function EmptyClipboard Lib "User32" () As Long
  Declare PtrSafe Function lstrcpy Lib "kernel32" (ByVal lpString1 As Any, _
    ByVal lpString2 As Any) As Long
  Declare PtrSafe Function SetClipboardData Lib "User32" (ByVal wFormat _
    As LongPtr, ByVal hMem As LongPtr) As Long
#Else
  Declare Function GlobalUnlock Lib "kernel32" (ByVal hMem As Long) As Long
  Declare Function GlobalLock Lib "kernel32" (ByVal hMem As Long) As Long
  Declare Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, _
    ByVal dwBytes As Long) As Long
  Declare Function CloseClipboard Lib "User32" () As Long
  Declare Function OpenClipboard Lib "User32" (ByVal hwnd As Long) As Long
  Declare Function EmptyClipboard Lib "User32" () As Long
  Declare Function lstrcpy Lib "kernel32" (ByVal lpString1 As Any, _
    ByVal lpString2 As Any) As Long
  Declare Function SetClipboardData Lib "User32" (ByVal wFormat _
    As Long, ByVal hMem As Long) As Long
#End If

Public Const GHND = &H42
Public Const CF_TEXT = 1
Public Const MAXSIZE = 4096

Function ClipBoard_SetData(MyString As String)
'PURPOSE: API function to copy text to clipboard
'SOURCE: www.msdn.microsoft.com/en-us/library/office/ff192913.aspx

Dim hGlobalMemory As Long, lpGlobalMemory As Long
Dim hClipMemory As Long, X As Long

'Allocate moveable global memory
  hGlobalMemory = GlobalAlloc(GHND, Len(MyString) + 1)

'Lock the block to get a far pointer to this memory.
  lpGlobalMemory = GlobalLock(hGlobalMemory)

'Copy the string to this global memory.
  lpGlobalMemory = lstrcpy(lpGlobalMemory, MyString)

'Unlock the memory.
  If GlobalUnlock(hGlobalMemory) <> 0 Then
    MsgBox "Could not unlock memory location. Copy aborted."
    GoTo OutOfHere2
  End If

'Open the Clipboard to copy data to.
  If OpenClipboard(0&) = 0 Then
    MsgBox "Could not open the Clipboard. Copy aborted."
    Exit Function
  End If

'Clear the Clipboard.
  X = EmptyClipboard()

'Copy the data to the Clipboard.
  hClipMemory = SetClipboardData(CF_TEXT, hGlobalMemory)

OutOfHere2:
  If CloseClipboard() = 0 Then
    MsgBox "Could not close Clipboard."
  End If

End Function

Sub CopyTextToClipboard(str As String)
'PURPOSE: Copy a given text to the clipboard (using Windows API)
'SOURCE: www.TheSpreadsheetGuru.com
'NOTES: Must have above API declaration and ClipBoard_SetData function in your code

Dim txt As String

'Put some text inside a string variable
  txt = str

'Place text into the Clipboard
   ClipBoard_SetData txt

'Notify User
  'MsgBox "There is now text copied to your clipboard!", vbInformation

End Sub



Sub Format_Quote()
'
' Format_Quote Macro
'
' Keyboard Shortcut: Ctrl+Shift+n
'
    Rows("15:15").RowHeight = 5
    Rows("22:22").RowHeight = 5
    Rows("26:26").RowHeight = 5
    Columns("C:C").ColumnWidth = 0.28
    Range("D25:V25").Select
    Selection.Font.Bold = True
    ActiveCell.FormulaR1C1 = "All prices in USD"
    'Range("M13:M13").Select
    'ActiveCell.FormulaR1C1 = ""
    Cells.Find("Delivery  F.O.B. Natick, MA").EntireRow.RowHeight = 40
    RowNum = Cells.Find("Delivery  F.O.B. Natick, MA").Row
    Range("N" & RowNum & ":V" & RowNum).Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlTop
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlLTR
        .MergeCells = True
    End With

End Sub

Sub Format_Quote_Disc()
'
' Format_Quote Macro
'
' Keyboard Shortcut: Ctrl+Shift+n
'
    Rows("15:15").RowHeight = 5
    Rows("22:22").RowHeight = 5
    Rows("26:26").RowHeight = 5
    Columns("C:C").ColumnWidth = 0.28
    Columns("D:D").ColumnWidth = 1.25
    Columns("E:E").ColumnWidth = 0.58
    Cells.Find("Product ID").EntireColumn.ColumnWidth = 11

    Columns("R:R").ColumnWidth = 2.89



    Range("D25:V25").Select
    Selection.Font.Bold = True
    ActiveCell.FormulaR1C1 = "All prices in USD"
    Cells.Find("Delivery  F.O.B. Natick, MA").EntireRow.RowHeight = 40
    RowNum = Cells.Find("Delivery  F.O.B. Natick, MA").Row
    Range("N" & RowNum & ":V" & RowNum).Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlTop
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlLTR
        .MergeCells = True
    End With

End Sub

Function GetFolder(Optional OpenAt As String) As String
    Dim fldr As FileDialog
    Dim sItem As String
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
    With fldr
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        .InitialFileName = OpenAt
        If .Show <> -1 Then GoTo NextCode
        sItem = .SelectedItems(1)
    End With
NextCode:
    GetFolder = sItem
    Set fldr = Nothing
End Function


'Public Function GetFolderName(Optional OpenAt As String) As String
'Dim lCount As Long

'GetFolderName = vbNullString

'With Application.FileDialog(msoFileDialogFolderPicker)
'    .AllowMultiSelect = False
'    .InitialFileName = OpenAt
'    .Show
'    For lCount = 1 To .SelectedItems.Count
'        GetFolderName = .SelectedItems(lCount)
'    Next lCount
'    If .Show = -1 Then
'       GetFolderName = .SelectedItems(1)
'    Else
'        End
'    End If
'End With
'End Function



Sub Save_Quote()
'
' Save_Quote Macro
'
' Keyboard Shortcut: Ctrl+Shift+B
'
    Dim projName, projClipboardName As Variant
    Dim todayDate, projAccountFolder, projAccount, initPath, pathToSave, docName As String
    Dim RowNum, ColNum As Integer
    'Dim projEngineer As String

' CHANGE THIS TO YOUR SIMPLICITY FOLDER WHERE YOU SAVE YOUR QUOTES
    initPath = "C:\Users\"


'Get the part number of the first item in the quote
    RowNum = Cells.Find("Product ID").Row + 1
    ColNum = Cells.Find("Product ID").Column
    projClipboardName = Cells(RowNum, ColNum).text
    CopyTextToClipboard (projClipboardName)
    projN = projClipboardName

'Get date
    todayDate = Format(Date, "mmddyyyy")


    '-Old saving method
    'projEngineer = GetFolderName(initPath)
    'pathToSave = GetFolderName(projEngineer)
    ' Get path to Engineer's folder
    'projEngineer = projEngineer & "\"
    ' Strip accounts name from path
    'projAccountFolder = Replace(pathToSave, projEngineer, "")
    'projAccount = Replace(projAccountFolder, " ", "")
    ' Build final saving path
    'finalPath = projEngineer & projAccountFolder
    '-

' Get final path
    finalPath = GetFolder((initPath))

'Strip account name from path
    projAccountFolder = Right(finalPath, (Len(finalPath) - InStrRev(finalPath, "\")))

'Remove spaces from account name
    projAccount = Replace(projAccountFolder, " ", "")

'User input for project name, if no name selected quit
    projName = InputBox("Project Title:")

    If projName = "" Then
        Exit Sub
    End If

'define final saving path
    docName = finalPath & "\" & projAccount & "_Quote_" & todayDate & "_" & projName

'Save Syncplicity
    On Error Resume Next
        ActiveWorkbook.SaveAs Filename:= _
        docName & ".xlsx", FileFormat:= _
        xlOpenXMLWorkbook, CreateBackup:=False

        ActiveSheet.ExportAsFixedFormat Type:=xlTypePDF, Filename:= _
        docName & ".pdf", Quality:=xlQualityStandard, _
        IncludeDocProperties:=True, IgnorePrintAreas:=False, OpenAfterPublish:= _
        True


'Copy the path of saved items to the clipboard
    CopyTextToClipboard (finalPath)

End Sub
